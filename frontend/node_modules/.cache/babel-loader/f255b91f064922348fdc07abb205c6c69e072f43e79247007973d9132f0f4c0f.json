{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Query, DataManager, Predicate } from '@syncfusion/ej2-data';\n/**\n * data module is used to generate query and data source.\n *\n * @private\n */\nvar Data = /** @class */function () {\n  /**\n   * Constructor for data module\n   *\n   * @param {Schedule} parent Accepts the schedule element instance\n   * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\n   * @param {Query} query Accepts the query to process the data\n   * @private\n   */\n  function Data(parent, dataSource, query) {\n    this.parent = parent;\n    this.initDataManager(dataSource, query);\n  }\n  /**\n   * The function used to initialize dataManager and query\n   *\n   * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\n   * @param {Query} query Accepts the query to process the data\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.initDataManager = function (dataSource, query) {\n    this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n    this.query = query instanceof Query ? query : new Query();\n  };\n  /**\n   * The function used to generate updated Query from schedule model\n   *\n   * @param {Date} startDate Accepts the start date\n   * @param {Date} endDate Accepts the end date\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.generateQuery = function (startDate, endDate) {\n    var query = this.query.clone();\n    if (this.parent && this.parent.eventSettings.includeFiltersInQuery && startDate && endDate) {\n      var dateQuery = this.getStartEndQuery(startDate, endDate);\n      var recurrenceQuery = new Predicate(this.parent.eventFields.recurrenceRule, 'notequal', null).and(new Predicate(this.parent.eventFields.recurrenceRule, 'notequal', ''));\n      return query.where(dateQuery.or(recurrenceQuery));\n    }\n    if (startDate) {\n      query.addParams('StartDate', startDate.toISOString());\n    }\n    if (endDate) {\n      query.addParams('EndDate', endDate.toISOString());\n    }\n    return query;\n  };\n  /**\n   * The function used to generate updated Query from schedule model\n   *\n   * @param {Date} startDate Accepts the start date\n   * @param {Date} endDate Accepts the end date\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.getStartEndQuery = function (startDate, endDate) {\n    var fieldMapping = this.parent.eventFields;\n    var dateQuery = new Predicate(fieldMapping.startTime, 'greaterthanorequal', startDate).and(new Predicate(fieldMapping.endTime, 'greaterthanorequal', startDate)).and(new Predicate(fieldMapping.startTime, 'lessthan', endDate)).or(new Predicate(fieldMapping.startTime, 'lessthanorequal', startDate).and(new Predicate(fieldMapping.endTime, 'greaterthan', startDate)));\n    return dateQuery;\n  };\n  /**\n   * The function used to get dataSource by executing given Query\n   *\n   * @param  {Query} query - A Query that specifies to generate dataSource\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.getData = function (query) {\n    return this.dataManager.executeQuery(query);\n  };\n  /**\n   * To destroy the crud module.\n   *\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.destroy = function () {\n    this.dataManager = null;\n    this.query = null;\n  };\n  return Data;\n}();\nexport { Data };","map":{"version":3,"names":["Query","DataManager","Predicate","Data","parent","dataSource","query","initDataManager","prototype","dataManager","generateQuery","startDate","endDate","clone","eventSettings","includeFiltersInQuery","dateQuery","getStartEndQuery","recurrenceQuery","eventFields","recurrenceRule","and","where","or","addParams","toISOString","fieldMapping","startTime","endTime","getData","executeQuery","destroy"],"sources":["C:/react_test/my-app/node_modules/@syncfusion/ej2-schedule/src/schedule/actions/data.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Query, DataManager, Predicate } from '@syncfusion/ej2-data';\n/**\n * data module is used to generate query and data source.\n *\n * @private\n */\nvar Data = /** @class */ (function () {\n    /**\n     * Constructor for data module\n     *\n     * @param {Schedule} parent Accepts the schedule element instance\n     * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\n     * @param {Query} query Accepts the query to process the data\n     * @private\n     */\n    function Data(parent, dataSource, query) {\n        this.parent = parent;\n        this.initDataManager(dataSource, query);\n    }\n    /**\n     * The function used to initialize dataManager and query\n     *\n     * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\n     * @param {Query} query Accepts the query to process the data\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.initDataManager = function (dataSource, query) {\n        this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n        this.query = query instanceof Query ? query : new Query();\n    };\n    /**\n     * The function used to generate updated Query from schedule model\n     *\n     * @param {Date} startDate Accepts the start date\n     * @param {Date} endDate Accepts the end date\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.generateQuery = function (startDate, endDate) {\n        var query = this.query.clone();\n        if (this.parent && this.parent.eventSettings.includeFiltersInQuery && startDate && endDate) {\n            var dateQuery = this.getStartEndQuery(startDate, endDate);\n            var recurrenceQuery = new Predicate(this.parent.eventFields.recurrenceRule, 'notequal', null).and(new Predicate(this.parent.eventFields.recurrenceRule, 'notequal', ''));\n            return query.where(dateQuery.or(recurrenceQuery));\n        }\n        if (startDate) {\n            query.addParams('StartDate', startDate.toISOString());\n        }\n        if (endDate) {\n            query.addParams('EndDate', endDate.toISOString());\n        }\n        return query;\n    };\n    /**\n     * The function used to generate updated Query from schedule model\n     *\n     * @param {Date} startDate Accepts the start date\n     * @param {Date} endDate Accepts the end date\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.getStartEndQuery = function (startDate, endDate) {\n        var fieldMapping = this.parent.eventFields;\n        var dateQuery = new Predicate(fieldMapping.startTime, 'greaterthanorequal', startDate)\n            .and(new Predicate(fieldMapping.endTime, 'greaterthanorequal', startDate))\n            .and(new Predicate(fieldMapping.startTime, 'lessthan', endDate))\n            .or(new Predicate(fieldMapping.startTime, 'lessthanorequal', startDate)\n            .and(new Predicate(fieldMapping.endTime, 'greaterthan', startDate)));\n        return dateQuery;\n    };\n    /**\n     * The function used to get dataSource by executing given Query\n     *\n     * @param  {Query} query - A Query that specifies to generate dataSource\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.getData = function (query) {\n        return this.dataManager.executeQuery(query);\n    };\n    /**\n     * To destroy the crud module.\n     *\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.destroy = function () {\n        this.dataManager = null;\n        this.query = null;\n    };\n    return Data;\n}());\nexport { Data };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}